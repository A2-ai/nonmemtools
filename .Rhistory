?purr::map_df
?purrr::map_df
parse_all_package_dependencies <- function(.row, dep_types = c("Depends", "Imports", "LinkingTo", "Suggests")) {
all_results <- lapply(dep_types, function(.d) {
dep_string <- .row[[.d]]
if (is.na(dep_string)) {
return(NA_character_)
}
res <- parse_pkg_dependency(dep_string)
res$type <- .d
return(res)
})
all_results <- all_results[!is.na(all_results)]
if (!length(all_results)) {
return(NA_character_)
}
pkg_deps <- vctrs::vec_rbind(all_results)
pkg_deps$package <- .row$Package
return(pkg_deps)
}
parse_all_package_dependencies(installed_packages_df[4, ])
installed_packages_df <- as.data.frame(installed.packages())
parse_all_package_dependencies(installed_packages_df[4, ])
result <- lapply(1:nrow(installed_packages_df), function(.i) {
parse_all_package_dependencies(installed_packages_df[.i, ])
})
parse_pkg_dependency <- function(string) {
if (is.null(string)) {
return()
}
#  stopifnot(is_string(string))
if (grepl("^\\s*$", string)) {
return()
}
pieces <- strsplit(string, "[[:space:]]*,[[:space:]]*")[[1]]
# Get the names
names <- gsub("\\s*\\(.*?\\)", "", pieces)
names <- gsub("^\\s+|\\s+$", "", names)
# Get the versions and comparison operators
versions_str <- pieces
have_version <- grepl("\\(.*\\)", versions_str)
versions_str[!have_version] <- NA
compare  <- sub(".*\\((\\S+)\\s+.*\\)", "\\1", versions_str)
versions <- sub(".*\\(\\S+\\s+(.*)\\)", "\\1", versions_str)
# Check that non-NA comparison operators are valid
compare_nna   <- compare[!is.na(compare)]
compare_valid <- compare_nna %in% c(">", ">=", "==", "<=", "<")
if(!all(compare_valid)) {
deps <- paste(compare_nna[!compare_valid], collapse = ", ")
cli::cli_abort("Invalid comparison operator in dependency: {deps}.")
}
deps <- tibble::tibble(
name = names,
compare = compare,
version = versions
)
return(deps)
}
parse_all_package_dependencies <- function(.row, dep_types = c("Depends", "Imports", "LinkingTo", "Suggests")) {
all_results <- lapply(dep_types, function(.d) {
dep_string <- .row[[.d]]
if (is.na(dep_string)) {
return(NA_character_)
}
res <- parse_pkg_dependency(dep_string)
res$type <- .d
return(res)
})
all_results <- all_results[!is.na(all_results)]
if (!length(all_results)) {
return(NA_character_)
}
pkg_deps <- vctrs::vec_rbind(all_results)
pkg_deps$package <- .row$Package
return(pkg_deps)
}
parse_all_package_dependencies(installed_packages_df[4, ])
parse_all_package_dependencies(installed_packages_df[3, ])
parse_all_package_dependencies <- function(.row, dep_types = c("Depends", "Imports", "LinkingTo", "Suggests")) {
all_results <- lapply(dep_types, function(.d) {
dep_string <- .row[[.d]]
if (is.na(dep_string)) {
return(NA_character_)
}
res <- parse_pkg_dependency(dep_string)
res$type <- .d
return(res)
})
all_results <- all_results[!is.na(all_results)]
if (!length(all_results)) {
return(NA_character_)
}
pkg_deps <- data.table::rbindlist(all_results)
pkg_deps$package <- .row$Package
return(pkg_deps)
}
parse_all_package_dependencies(installed_packages_df[3, ])
result <-  data.table::rbindlist(result[!is.na(result)] )
result <- lapply(1:nrow(installed_packages_df), function(.i) {
parse_all_package_dependencies(installed_packages_df[.i, ])
})
result <-  data.table::rbindlist(result[!is.na(result)] )
system.time({
result <- lapply(1:nrow(installed_packages_df), function(.i) {
parse_all_package_dependencies(installed_packages_df[.i, ])
})
result <-  data.table::rbindlist(result[!is.na(result)] )
})
installed_packages_df <- as.data.frame(available.packages())
system.time({
result <- lapply(1:nrow(installed_packages_df), function(.i) {
parse_all_package_dependencies(installed_packages_df[.i, ])
})
result <-  data.table::rbindlist(result[!is.na(result)] )
})
install.packages("profviz")
install.packages("profvis")
system.time({
parse_all_package_dependencies(installed_packages_df[3, ])
})
0.002*20000
installed_packages_df[3, ]
parse_all_package_dependencies(installed_packages_df[3, ])
profvis::profvis({
parse_all_package_dependencies(installed_packages_df[3, ])
})
profvis::profvis({
parse_all_package_dependencies(installed_packages_df[3, ])
}, interval = 0.005)
profvis::profvis({
result <- lapply(1:nrow(installed_packages_df), function(.i) {
parse_all_package_dependencies(installed_packages_df[.i, ])
})
result <-  data.table::rbindlist(result[!is.na(result)] )
}, interval = 0.005)
installed_packages_df <- as.data.frame(installed.packages())
profvis::profvis({
result <- lapply(1:nrow(installed_packages_df), function(.i) {
parse_all_package_dependencies(installed_packages_df[.i, ])
})
result <-  data.table::rbindlist(result[!is.na(result)] )
}, interval = 0.005)
?tibble::new_tibble
system.time({
result <- lapply(1:nrow(installed_packages_df), function(.i) {
parse_all_package_dependencies(installed_packages_df[.i, ])
})
result <-  data.table::rbindlist(result[!is.na(result)] )
})
parse_pkg_dependency <- function(string) {
if (is.null(string)) {
return()
}
#  stopifnot(is_string(string))
if (grepl("^\\s*$", string)) {
return()
}
pieces <- strsplit(string, "[[:space:]]*,[[:space:]]*")[[1]]
# Get the names
names <- gsub("\\s*\\(.*?\\)", "", pieces)
names <- gsub("^\\s+|\\s+$", "", names)
# Get the versions and comparison operators
versions_str <- pieces
have_version <- grepl("\\(.*\\)", versions_str)
versions_str[!have_version] <- NA
compare  <- sub(".*\\((\\S+)\\s+.*\\)", "\\1", versions_str)
versions <- sub(".*\\(\\S+\\s+(.*)\\)", "\\1", versions_str)
# Check that non-NA comparison operators are valid
compare_nna   <- compare[!is.na(compare)]
compare_valid <- compare_nna %in% c(">", ">=", "==", "<=", "<")
if(!all(compare_valid)) {
deps <- paste(compare_nna[!compare_valid], collapse = ", ")
cli::cli_abort("Invalid comparison operator in dependency: {deps}.")
}
deps <- tibble::new_tibble(list(
name = names,
compare = compare,
version = versions
))
return(deps)
}
system.time({
result <- lapply(1:nrow(installed_packages_df), function(.i) {
parse_all_package_dependencies(installed_packages_df[.i, ])
})
result <-  data.table::rbindlist(result[!is.na(result)] )
})
installed_packages_df <- as.data.frame(available.packages())
system.time({
result <- lapply(1:nrow(installed_packages_df), function(.i) {
parse_all_package_dependencies(installed_packages_df[.i, ])
})
result <-  data.table::rbindlist(result[!is.na(result)] )
})
profvis::profvis({
result <- lapply(1:nrow(installed_packages_df), function(.i) {
parse_all_package_dependencies(installed_packages_df[.i, ])
})
result <-  data.table::rbindlist(result[!is.na(result)] )
}, interval = 0.005)
parse_pkg_dependency <- function(string) {
if (is.null(string)) {
return()
}
#  stopifnot(is_string(string))
if (grepl("^\\s*$", string)) {
return()
}
pieces <- strsplit(string, "[[:space:]]*,[[:space:]]*")[[1]]
# Get the names
names <- gsub("\\s*\\(.*?\\)", "", pieces)
names <- gsub("^\\s+|\\s+$", "", names)
# Get the versions and comparison operators
versions_str <- pieces
have_version <- grepl("\\(.*\\)", versions_str)
versions_str[!have_version] <- NA
compare  <- sub(".*\\((\\S+)\\s+.*\\)", "\\1", versions_str)
versions <- sub(".*\\(\\S+\\s+(.*)\\)", "\\1", versions_str)
# Check that non-NA comparison operators are valid
compare_nna   <- compare[!is.na(compare)]
compare_valid <- compare_nna %in% c(">", ">=", "==", "<=", "<")
if(!all(compare_valid)) {
deps <- paste(compare_nna[!compare_valid], collapse = ", ")
cli::cli_abort("Invalid comparison operator in dependency: {deps}.")
}
deps <- list(
name = names,
compare = compare,
version = versions
)
return(deps)
}
parse_all_package_dependencies <- function(.row, dep_types = c("Depends", "Imports", "LinkingTo", "Suggests")) {
result_list <- list(name = character(0), compare = character(0), version = character(0))
for (d in dep_types) {
res <- parse_pkg_deps(.row[[d]])
if (is.na(res)) {
next
}
result_list$name <- c(result_list$name, res$name)
result_list$compare <- c(result_list$compare, res$compare)
result_list$version <- c(result_list$version, res$version)
}
if (!length(result_list$name)) {
return(NA)
}
res_df <- tibble::new_tibble(result_list)
res_df$package <- .row$Package
return(res_df)
}
parse_all_package_dependencies <- function(.row, dep_types = c("Depends", "Imports", "LinkingTo", "Suggests")) {
result_list <- list(name = character(0), compare = character(0), version = character(0))
for (d in dep_types) {
res <- parse_pkg_deps(.row[[d]])
if (is.na(res)) {
next
}
result_list$name <- c(result_list$name, res$name)
result_list$compare <- c(result_list$compare, res$compare)
result_list$version <- c(result_list$version, res$version)
}
if (!length(result_list$name)) {
return(NA)
}
res_df <- tibble::new_tibble(result_list)
res_df$package <- .row$Package
return(res_df)
}
parse_all_package_dependencies <- function(.row, dep_types = c("Depends", "Imports", "LinkingTo", "Suggests")) {
result_list <- list(name = character(0), compare = character(0), version = character(0))
for (d in dep_types) {
res <- parse_pkg_deps(.row[[d]])
if (is.na(res)) {
next
}
result_list$name <- c(result_list$name, res$name)
result_list$compare <- c(result_list$compare, res$compare)
result_list$version <- c(result_list$version, res$version)
}
if (!length(result_list$name)) {
return(NA)
}
res_df <- tibble::new_tibble(result_list)
res_df$package <- .row$Package
return(res_df)
}
parse_all_package_dependencies(installed_packages_df[3, ])
parse_all_package_dependencies <- function(.row, dep_types = c("Depends", "Imports", "LinkingTo", "Suggests")) {
result_list <- list(name = character(0), compare = character(0), version = character(0))
for (d in dep_types) {
res <- parse_pkg_dependency(.row[[d]])
if (is.na(res)) {
next
}
result_list$name <- c(result_list$name, res$name)
result_list$compare <- c(result_list$compare, res$compare)
result_list$version <- c(result_list$version, res$version)
}
if (!length(result_list$name)) {
return(NA)
}
res_df <- tibble::new_tibble(result_list)
res_df$package <- .row$Package
return(res_df)
}
parse_all_package_dependencies(installed_packages_df[3, ])
parse_all_package_dependencies <- function(.row, dep_types = c("Depends", "Imports", "LinkingTo", "Suggests")) {
result_list <- list(name = character(0), compare = character(0), version = character(0))
for (d in dep_types) {
res <- parse_pkg_dependency(.row[[d]])
if (!length(res$name)) {
next
}
result_list$name <- c(result_list$name, res$name)
result_list$compare <- c(result_list$compare, res$compare)
result_list$version <- c(result_list$version, res$version)
}
if (!length(result_list$name)) {
return(NA)
}
res_df <- tibble::new_tibble(result_list)
res_df$package <- .row$Package
return(res_df)
}
parse_all_package_dependencies(installed_packages_df[3, ])
system.time({
result <- lapply(1:nrow(installed_packages_df), function(.i) {
parse_all_package_dependencies(installed_packages_df[.i, ])
})
result <-  data.table::rbindlist(result[!is.na(result)] )
})
rextendr::document()
rextendr::document()
rextendr::document()
devtools::load_all()
devtools::load_all(".")
parse_ext_file_impl
devtools::load_all(".")
parse_ext_file_impl
devtools::load_all(".")
parse_ext_file_impl
devtools::load_all(".")
rextendr::document()
devtools::load_all()
parse_ext_file_impl("src/rust/tests/fixtures/single-table-01.ext")
tibble::as_tibble(parse_ext_file_impl("src/rust/tests/fixtures/single-table-01.ext"))
rextendr::document()
parse_ext_file_impl("src/rust/tests/fixtures/single-table-01.ext")
rextendr::document()
parse_ext_file_impl("src/rust/tests/fixtures/single-table-01.ext")
tibble::as_tibble(parse_ext_file_impl("src/rust/tests/fixtures/single-table-01.ext"))
system.time({tibble::as_tibble(parse_ext_file_impl("src/rust/tests/fixtures/single-table-01.ext"))})
install.packages("bench")
bench::mark(
tibble::as_tibble(parse_ext_file_impl("src/rust/tests/fixtures/single-table-01.ext"))
)
rextendr::document()
rextendr::document()
bench::mark(
tibble::as_tibble(parse_ext_file_impl("src/rust/tests/fixtures/single-table-01.ext"))
)
tibble::as_tibble(parse_ext_file_impl("src/rust/tests/fixtures/single-table-01.ext"))
rextendr::document()
bench::mark(
tibble::as_tibble(parse_ext_file_impl("src/rust/tests/fixtures/single-table-01.ext"))
)
tibble::as_tibble(parse_ext_file_impl("src/rust/tests/fixtures/single-table-01.ext"))
bench::mark(
res <- tibble::as_tibble(parse_ext_file_impl("src/rust/tests/fixtures/single-table-01.ext"))
)
res
rextendr::document()
bench::mark(
res <- tibble::as_tibble(parse_ext_file_impl("src/rust/tests/fixtures/single-table-01.ext"))
)
res
res$stderr
rextendr::document()
bench::mark(
res <- tibble::as_tibble(parse_ext_file_impl("src/rust/tests/fixtures/single-table-01.ext"))
)
rextendr::document()
bench::mark(
res <- tibble::as_tibble(parse_ext_file_impl("src/rust/tests/fixtures/single-table-01.ext"))
)
res$stderr
res
bench::mark(
res <- tibble::as_tibble(parse_ext_file_impl("src/rust/tests/fixtures/CONTROL5-NOCOV/CONTROL5.ext"))
)
res$stderr
res
rextendr::document()
rextendr::document()
bench::mark(
res <- tibble::as_tibble(parse_ext_file_impl("src/rust/tests/fixtures/CONTROL5-NOCOV/CONTROL5.ext"))
)
res
48000/150
source("~/repos/a2-ai/hermes/R/inst/benchmarks.R", echo=TRUE)
rextendr::document()
devtools::load_all(".")
tibble::as_tibble(parse_ext_file_impl("src/rust/tests/fixtures/CONTROL5-NOCOV/CONTROL5.ext"))
tibble::as_tibble(parse_ext_file_impl("src/rust/tests/fixtures/single-table-01.ext"))
rextendr::document()
devtools::document()
